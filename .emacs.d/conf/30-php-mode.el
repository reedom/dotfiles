(use-package php-mode
  :ensure t
  :mode (("\\.php[0-9]*\\'" . php-mode))
  :interpreter (("php" . php-mode))
  :bind (:map php-mode-map
              ("C-c b" . 'geben-set-breakpoint-line)
              ("C-m" . 'newline-and-indent)
              ("C-c b" . 'geben-set-breakpoint-line)
              ("M-p" . 'quickrun))
  :defer t
  :config
  (progn
    ;; (unless (fboundp 'php-compile)
    ;;   (defun php-compile ()
    ;;     (mc--shell-compile "php" "" nil)))

    ;;     (defun orgtbl-hijacker-command-103-php (ARG)
    ;;       "In tables, run `orgtbl-tab'.
    ;; Outside of tables, run the binding of `	' or `[(tab)]'."
    ;;       (interactive "p")
    ;;       (let ((org-table-line-regexp "^[ \t]*\\*?[ \t]*|")
    ;;             (org-table-border-regexp "^[ \t]*\\*?[ \t]*[^| \t]"))
    ;;         (if (org-at-table-p)
    ;;             (call-interactively 'orgtbl-tab)
    ;;           (let (orgtbl-mode)
    ;;             (call-interactively (key-binding "\C-i"))))))

    (add-hook 'php-mode-hook
              (lambda nil
                (message "php-hook")
                (setq tab-width 4)
                (setq c-basic-offset 4)
                (c-set-offset 'arglist-intro '+)
                (c-set-offset 'arglist-close '0)
                ;;(setq c-hanging-comment-ender-p nil)
                (setq indent-tabs-mode nil)
                (setq comment-start "// " comment-end "")
                (defvar quickrun-option-cmdkey)
                (setq quickrun-option-cmdkey "php")
                ;; (setq c-offsets-alist '((inexpr-class . +)
                ;; (inexpr-statement . +)
                ;; (lambda-intro-cont . +)
                ;; (inlambda . c-lineup-inexpr-block)
                ;; (template-args-cont c-lineup-template-args +)
                ;; (incomposition . +)
                ;; (inmodule . +)
                ;; (innamespace . +)
                ;; (inextern-lang . +)
                ;; (composition-close . 0)
                ;; (module-close . 0)
                ;; (namespace-close . 0)
                ;; (extern-lang-close . 0)
                ;; (composition-open . 0)
                ;; (module-open . 0)
                ;; (namespace-open . 0)
                ;; (extern-lang-open . 0)
                ;; (objc-method-call-cont c-lineup-ObjC-method-call-colons c-lineup-ObjC-method-call +)
                ;; (objc-method-args-cont . c-lineup-ObjC-method-args)
                ;; (objc-method-intro . [0])
                ;; (friend . 0)
                ;; (cpp-define-intro c-lineup-cpp-define +)
                ;; (cpp-macro-cont . +)
                ;; (cpp-macro . [0])
                ;; (inclass . +)
                ;; (stream-op . c-lineup-streamop)
                ;; (arglist-cont-nonempty c-lineup-gcc-asm-reg c-lineup-arglist)
                ;; (arglist-cont c-lineup-gcc-asm-reg 0)
                ;; (comment-intro c-lineup-knr-region-comment c-lineup-comment)
                ;; (catch-clause . 0)
                ;; (else-clause . 0)
                ;; (do-while-closure . 0)
                ;; (access-label . -)
                ;; (case-label . 0)
                ;; (substatement . +)
                ;; (statement-case-intro . +)
                ;; (statement . 0)
                ;; (brace-entry-open . 0)
                ;; (brace-list-entry . c-lineup-cascaded-calls)
                ;; (brace-list-intro . +)
                ;; (brace-list-close . 0)
                ;; (block-close . 0)
                ;; (block-open . -)
                ;; (inher-cont . c-lineup-multi-inher)
                ;; (inher-intro . +)
                ;; (member-init-cont . c-lineup-multi-inher)
                ;; (member-init-intro . +)
                ;; (annotation-var-cont . +)
                ;; (annotation-top-cont . 0)
                ;; (topmost-intro . 0)
                ;; (knr-argdecl . 0)
                ;; (func-decl-cont . +)
                ;; (inline-close . 0)
                ;; (class-close . 0)
                ;; (class-open . 0)
                ;; (defun-block-intro . +)
                ;; (defun-close . 0)
                ;; (defun-open . 0)
                ;; (c . c-lineup-C-comments)
                ;; (string . c-lineup-dont-change)
                ;; (topmost-intro-cont . c-lineup-cascaded-calls)
                ;; (brace-list-open . 0)
                ;; (inline-open . +)
                ;; (statement-cont first c-lineup-cascaded-calls +)
                ;; (statement-case-open . 0)
                ;; (label . 2)
                ;; (substatement-label . 2)
                ;; (substatement-open . +)
                ;; (knr-argdecl-intro . +)
                ;; (statement-block-intro . +)
                ;; (arglist-close . 0)
                ;;                      (arglist-intro . +))
                ))))
